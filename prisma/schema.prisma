// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User and Authentication
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  accounts      Account[]
  sessions      Session[]
  orders        Order[]
  cart          Cart?
  wishlist      Wishlist?
  reviews       Review[]
  addresses     Address[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token          String?  @db.Text
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Products and Inventory
model Category {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String?
  image       String?
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id           String         @id @default(cuid())
  name         String
  slug         String         @unique
  description  String         @db.Text
  price        Decimal        @db.Decimal(10, 2)
  comparePrice Decimal?       @db.Decimal(10, 2)
  cost         Decimal?       @db.Decimal(10, 2)
  sku          String         @unique
  barcode      String?
  trackQty     Boolean        @default(true)
  qty          Int            @default(0)
  images       ProductImage[]
  category     Category       @relation(fields: [categoryId], references: [id])
  categoryId   String
  tags         Tag[]
  variants     ProductVariant[]
  featured     Boolean        @default(false)
  active       Boolean        @default(true)
  reviews      Review[]
  orderItems   OrderItem[]
  cartItems    CartItem[]
  wishlistItems WishlistItem[]
  seo          Seo?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model ProductImage {
  id        String   @id @default(cuid())
  url       String
  alt       String?
  width     Int?
  height    Int?
  format    String?
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  order     Int      @default(0)
  createdAt DateTime @default(now())
}

model ProductVariant {
  id        String    @id @default(cuid())
  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  name      String
  value     String
  price     Decimal?  @db.Decimal(10, 2)
  sku       String?
  qty       Int       @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Tag {
  id        String    @id @default(cuid())
  name      String    @unique
  slug      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
}

// Shopping Cart
model Cart {
  id        String     @id @default(cuid())
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String     @unique
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String   @id @default(cuid())
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, productId])
}

// Wishlist
model Wishlist {
  id        String         @id @default(cuid())
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String         @unique
  items     WishlistItem[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model WishlistItem {
  id         String   @id @default(cuid())
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)
  wishlistId String
  product    Product  @relation(fields: [productId], references: [id])
  productId  String
  createdAt  DateTime @default(now())

  @@unique([wishlistId, productId])
}

// Orders
model Order {
  id              String        @id @default(cuid())
  orderNumber     String        @unique
  user            User?         @relation(fields: [userId], references: [id])
  userId          String?
  email           String
  phone           String?
  status          OrderStatus   @default(PENDING)
  paymentStatus   PaymentStatus @default(PENDING)
  paymentMethod   String?
  stripePaymentId String?
  items           OrderItem[]
  subtotal        Decimal       @db.Decimal(10, 2)
  tax             Decimal       @db.Decimal(10, 2)
  shipping        Decimal       @db.Decimal(10, 2)
  discount        Decimal       @default(0) @db.Decimal(10, 2)
  total           Decimal       @db.Decimal(10, 2)
  shippingAddress Address?      @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  shippingAddressId String?
  billingAddress  Address?      @relation("BillingAddress", fields: [billingAddressId], references: [id])
  billingAddressId String?
  notes           String?
  metadata        Json?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model OrderItem {
  id        String   @id @default(cuid())
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  name      String
  price     Decimal  @db.Decimal(10, 2)
  quantity  Int
  total     Decimal  @db.Decimal(10, 2)
  metadata  Json?
  createdAt DateTime @default(now())
}

// Reviews
model Review {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  rating    Int
  title     String?
  comment   String?  @db.Text
  verified  Boolean  @default(false)
  helpful   Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId])
}

// Addresses
model Address {
  id              String   @id @default(cuid())
  user            User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String?
  name            String
  company         String?
  address1        String
  address2        String?
  city            String
  state           String
  postalCode      String
  country         String
  phone           String?
  isDefault       Boolean  @default(false)
  shippingOrders  Order[]  @relation("ShippingAddress")
  billingOrders   Order[]  @relation("BillingAddress")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

// SEO
model Seo {
  id              String   @id @default(cuid())
  product         Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId       String   @unique
  metaTitle       String?
  metaDescription String?
  metaKeywords    String?
  ogTitle         String?
  ogDescription   String?
  ogImage         String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

// Enums
enum UserRole {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}